{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitth\\\\Projects\\\\minesweeper-react\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport GameHeader from './GameHeader';\nimport GameBoard from './GameBoard';\nimport { createEmptyBoard, placeMines, revealCell, toggleFlag, checkWinCondition, revealAllMines, countFlags, getDefaultConfig } from './gameUtils';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [config] = useState(getDefaultConfig());\n  const [gameState, setGameState] = useState(() => ({\n    board: createEmptyBoard(config.width, config.height),\n    gameStatus: 'playing',\n    mineCount: config.mines,\n    flagCount: 0,\n    timeElapsed: 0,\n    isFirstClick: true\n  }));\n\n  // Timer effect\n  useEffect(() => {\n    let interval;\n    if (gameState.gameStatus === 'playing' && !gameState.isFirstClick) {\n      interval = setInterval(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          timeElapsed: prevState.timeElapsed + 1\n        }));\n      }, 1000);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [gameState.gameStatus, gameState.isFirstClick]);\n  const restartGame = useCallback(() => {\n    setGameState({\n      board: createEmptyBoard(config.width, config.height),\n      gameStatus: 'playing',\n      mineCount: config.mines,\n      flagCount: 0,\n      timeElapsed: 0,\n      isFirstClick: true\n    });\n  }, [config]);\n  const handleCellLeftClick = useCallback((x, y) => {\n    setGameState(prevState => {\n      if (prevState.gameStatus !== 'playing') {\n        return prevState;\n      }\n      let newBoard = prevState.board;\n\n      // Handle first click - place mines\n      if (prevState.isFirstClick) {\n        newBoard = placeMines(newBoard, config.mines, x, y);\n      }\n\n      // Reveal the cell\n      newBoard = revealCell(newBoard, x, y);\n      const clickedCell = newBoard[y][x];\n      let newGameStatus = prevState.gameStatus;\n\n      // Check if clicked on mine\n      if (clickedCell.isMine) {\n        newGameStatus = 'lost';\n        newBoard = revealAllMines(newBoard);\n      } else {\n        // Check win condition\n        if (checkWinCondition(newBoard)) {\n          newGameStatus = 'won';\n        }\n      }\n      return {\n        ...prevState,\n        board: newBoard,\n        gameStatus: newGameStatus,\n        isFirstClick: false,\n        flagCount: countFlags(newBoard)\n      };\n    });\n  }, [config.mines]);\n  const handleCellRightClick = useCallback((x, y) => {\n    setGameState(prevState => {\n      if (prevState.gameStatus !== 'playing') {\n        return prevState;\n      }\n      const newBoard = toggleFlag(prevState.board, x, y);\n      return {\n        ...prevState,\n        board: newBoard,\n        flagCount: countFlags(newBoard)\n      };\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Minesweeper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameHeader, {\n        mineCount: gameState.mineCount,\n        flagCount: gameState.flagCount,\n        timeElapsed: gameState.timeElapsed,\n        gameStatus: gameState.gameStatus,\n        onRestart: restartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        board: gameState.board,\n        onCellLeftClick: handleCellLeftClick,\n        onCellRightClick: handleCellRightClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instructions\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Left click to reveal \\u2022 Right click to flag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Bj2oR4+zlLDNo99c21L1qcHKf8A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GameHeader","GameBoard","createEmptyBoard","placeMines","revealCell","toggleFlag","checkWinCondition","revealAllMines","countFlags","getDefaultConfig","jsxDEV","_jsxDEV","App","_s","config","gameState","setGameState","board","width","height","gameStatus","mineCount","mines","flagCount","timeElapsed","isFirstClick","interval","setInterval","prevState","clearInterval","restartGame","handleCellLeftClick","x","y","newBoard","clickedCell","newGameStatus","isMine","handleCellRightClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onRestart","onCellLeftClick","onCellRightClick","_c","$RefreshReg$"],"sources":["C:/Users/Vitth/Projects/minesweeper-react/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport GameHeader from './GameHeader';\r\nimport GameBoard from './GameBoard';\r\nimport { GameState, GameConfig } from './types';\r\nimport {\r\n  createEmptyBoard,\r\n  placeMines,\r\n  revealCell,\r\n  toggleFlag,\r\n  checkWinCondition,\r\n  revealAllMines,\r\n  countFlags,\r\n  getDefaultConfig,\r\n} from './gameUtils';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n  const [config] = useState<GameConfig>(getDefaultConfig());\r\n  const [gameState, setGameState] = useState<GameState>(() => ({\r\n    board: createEmptyBoard(config.width, config.height),\r\n    gameStatus: 'playing',\r\n    mineCount: config.mines,\r\n    flagCount: 0,\r\n    timeElapsed: 0,\r\n    isFirstClick: true,\r\n  }));\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout;\r\n    \r\n    if (gameState.gameStatus === 'playing' && !gameState.isFirstClick) {\r\n      interval = setInterval(() => {\r\n        setGameState(prevState => ({\r\n          ...prevState,\r\n          timeElapsed: prevState.timeElapsed + 1,\r\n        }));\r\n      }, 1000);\r\n    }\r\n    \r\n    return () => {\r\n      if (interval) {\r\n        clearInterval(interval);\r\n      }\r\n    };\r\n  }, [gameState.gameStatus, gameState.isFirstClick]);\r\n\r\n  const restartGame = useCallback(() => {\r\n    setGameState({\r\n      board: createEmptyBoard(config.width, config.height),\r\n      gameStatus: 'playing',\r\n      mineCount: config.mines,\r\n      flagCount: 0,\r\n      timeElapsed: 0,\r\n      isFirstClick: true,\r\n    });\r\n  }, [config]);\r\n\r\n  const handleCellLeftClick = useCallback((x: number, y: number) => {\r\n    setGameState(prevState => {\r\n      if (prevState.gameStatus !== 'playing') {\r\n        return prevState;\r\n      }\r\n\r\n      let newBoard = prevState.board;\r\n      \r\n      // Handle first click - place mines\r\n      if (prevState.isFirstClick) {\r\n        newBoard = placeMines(newBoard, config.mines, x, y);\r\n      }\r\n\r\n      // Reveal the cell\r\n      newBoard = revealCell(newBoard, x, y);\r\n      \r\n      const clickedCell = newBoard[y][x];\r\n      let newGameStatus = prevState.gameStatus;\r\n\r\n      // Check if clicked on mine\r\n      if (clickedCell.isMine) {\r\n        newGameStatus = 'lost';\r\n        newBoard = revealAllMines(newBoard);\r\n      } else {\r\n        // Check win condition\r\n        if (checkWinCondition(newBoard)) {\r\n          newGameStatus = 'won';\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...prevState,\r\n        board: newBoard,\r\n        gameStatus: newGameStatus,\r\n        isFirstClick: false,\r\n        flagCount: countFlags(newBoard),\r\n      };\r\n    });\r\n  }, [config.mines]);\r\n\r\n  const handleCellRightClick = useCallback((x: number, y: number) => {\r\n    setGameState(prevState => {\r\n      if (prevState.gameStatus !== 'playing') {\r\n        return prevState;\r\n      }\r\n\r\n      const newBoard = toggleFlag(prevState.board, x, y);\r\n      \r\n      return {\r\n        ...prevState,\r\n        board: newBoard,\r\n        flagCount: countFlags(newBoard),\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"game-container\">\r\n        <h1>Minesweeper</h1>\r\n        \r\n        <GameHeader\r\n          mineCount={gameState.mineCount}\r\n          flagCount={gameState.flagCount}\r\n          timeElapsed={gameState.timeElapsed}\r\n          gameStatus={gameState.gameStatus}\r\n          onRestart={restartGame}\r\n        />\r\n        \r\n        <GameBoard\r\n          board={gameState.board}\r\n          onCellLeftClick={handleCellLeftClick}\r\n          onCellRightClick={handleCellRightClick}\r\n        />\r\n        \r\n        <div className=\"instructions\">\r\n          <p>Left click to reveal â€¢ Right click to flag</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}